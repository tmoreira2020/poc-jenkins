## This file contains sample Docker command which you will typically want to run
## with the built Dockerfile.
## Make sure to run all commands in current directory ([liferay_workspace_root]/build).

# Build, commit and tag the final image, based on currently built Dockerfile; commit the image with current project's version.
#
# '$DOCKER_CONTAINER_REPOSITORY' was computed based on 'liferay.workspace.ee.docker.repository.company'
# in gradle.properties in combination with project's version computed based on the Liferay Workspace EE
# build producing this file.
#
# This step is not necessary if you run 'gradlew distBundleDockerImageLocal', which will perform this step for you.

docker build -t @DOCKER_CONTAINER_REPOSITORY@:@DOCKER_TAG@ .

# Run the final image, either produced by 'gradlew distBundleDockerImageLocal' or by manually running
# the previous 'docker build' command.
#
# --stop-timeout allows sufficient time for liferay to shut down before SIGKILL is sent to container
# see liferay-tomcat.sh for signal trapping
#

docker run -i -t --stop-timeout=100 @DOCKER_CONTAINER_REPOSITORY@:@DOCKER_TAG@

# Build, commit and tag the final image, based on currently built Dockerfile; commit the image as 'latest' version,
# ignoring the inner version of the bundle's .deb file

docker build -t @DOCKER_CONTAINER_REPOSITORY@:latest .

# Run the final image if it was tagged as 'latest' by manually running the previous 'docker build' command.
#
# --stop-timeout allows sufficient time for liferay to shut down before SIGKILL is sent to container
# see liferay-tomcat.sh for signal trapping
#

docker run -i -t --stop-timeout=100 @DOCKER_CONTAINER_REPOSITORY@