// TODO specify the version of your project, it's used to name your artifacts;
// '0.0.0' will be used in workspace EE if not set explicitly

// version = '1.0.0'

import org.apache.tools.ant.filters.*

apply plugin: 'java'

task distWeDeploy {
    dependsOn jar

    doLast {
        println 'Preparing the '
    }
}

task collectOsgiConfigs(type: Copy) {

    def service = "lfr"

    from "${gradle.liferayWorkspace.configsDir}/${gradle.liferayWorkspace.environment}/${service}/config"
    from "${gradle.liferayWorkspace.configsDir}/common/${service}/config"

    into "${rootProject.buildDir}/wedeploy/${service}/osgi-configs"

    include '*.cfg'
    include '*.config'

    // first one wins
    duplicatesStrategy 'exclude'

    doFirst {
        println "Found OSGi configs (first one for each filename wins):"
    }

    eachFile { FileCopyDetails fcd ->
        def existsInDest = new File(destinationDir, fcd.name).exists()

        println "  * ${existsInDest ? 'skipping' : 'copying '} ${fcd.name.padRight(100)} (${rootProject.relativePath(fcd.file.parentFile)})"
    }
}

task collectPropertiesFiles(type: Copy) {

    def service = "lfr"

    from "${gradle.liferayWorkspace.configsDir}/${gradle.liferayWorkspace.environment}/${service}/"
    from "${gradle.liferayWorkspace.configsDir}/common/${service}/"

    into "${rootProject.buildDir}/wedeploy/${service}/"

    include '*.properties'

    // first one wins
    duplicatesStrategy 'exclude'

    doFirst {
        println "Found properties files (first one for each filename wins):"
    }

    eachFile { FileCopyDetails fcd ->
        def existsInDest = new File(destinationDir, fcd.name).exists()

        println "  * ${existsInDest ? 'skipping' : 'copying '} ${fcd.name.padRight(100)} (${rootProject.relativePath(fcd.file.parentFile)})"
    }
}

task collectWeDeployJSON(type: Copy) {

    new File("${gradle.liferayWorkspace.configsDir}/common/").eachDir(){ dir -> 
      from(dir) {
          into (dir.name)
      }
    }

    new File("${gradle.liferayWorkspace.configsDir}/${gradle.liferayWorkspace.environment}/").eachDir(){ dir -> 
      from(dir) {
          into (dir.name)
      }
    }

    into "${rootProject.buildDir}/wedeploy/"

    include 'wedeploy.json'

    filter(
        ReplaceTokens,
        tokens: [
            'liferay.workspace.wedeploy.database.image'  : project.property("liferay.workspace.wedeploy.database.image"),
            'liferay.workspace.wedeploy.elasticsearch.image'  : project.property("liferay.workspace.wedeploy.elasticsearch.image"),
            'liferay.workspace.wedeploy.liferay.image'  : project.property("liferay.workspace.wedeploy.liferay.image"),
            'liferay.workspace.wedeploy.backup.image'  : project.property("liferay.workspace.wedeploy.backup.image"),
            'liferay.workspace.wedeploy.proxy.image'  : project.property("liferay.workspace.wedeploy.proxy.image")
        ]
    )

    // last one wins
    duplicatesStrategy 'include'

    doFirst {
        println "Found wedeploy.json (last one for each filename wins):"
    }

    eachFile { FileCopyDetails fcd ->
        println "  * copying ${fcd.name.padRight(100)} (todo)"
    }
}

task collectDockerCompose(type: Copy) {

    from "${gradle.liferayWorkspace.configsDir}/${gradle.liferayWorkspace.environment}/"

    into "${rootProject.buildDir}/wedeploy/"

    include 'docker-compose.yml'

    filter(
        ReplaceTokens,
        tokens: [
            'liferay.workspace.wedeploy.database.image'  : project.property("liferay.workspace.wedeploy.database.image"),
            'liferay.workspace.wedeploy.elasticsearch.image'  : project.property("liferay.workspace.wedeploy.elasticsearch.image"),
            'liferay.workspace.wedeploy.liferay.image'  : project.property("liferay.workspace.wedeploy.liferay.image"),
            'liferay.workspace.wedeploy.backup.image'  : project.property("liferay.workspace.wedeploy.backup.image"),
            'liferay.workspace.wedeploy.proxy.image'  : project.property("liferay.workspace.wedeploy.proxy.image")
        ]
    )

    // first one wins
    duplicatesStrategy 'exclude'

    doFirst {
        println "Found docker-compose.yml (first one for each filename wins):"
    }

    eachFile { FileCopyDetails fcd ->
        def existsInDest = new File(destinationDir, fcd.name).exists()

        //println "  * ${existsInDest ? 'skipping' : 'copying '} ${fcd.name.padRight(100)} (${rootProject.relativePath(fcd.file.parentFile)})"
    }
}

task copyStaticDeployableFiles(type: Copy) {

    def service = "lfr"

    from "${gradle.liferayWorkspace.configsDir}/common/${service}/deploy"
    from "${gradle.liferayWorkspace.configsDir}/${gradle.liferayWorkspace.environment}/${service}/deploy"

    into "${rootProject.buildDir}/wedeploy/${service}/deploy"

    // no 'include' patterns - anything placed in any of the dirs will be copied

    exclude '.touch'

    // last one wins
    duplicatesStrategy 'include'

    doFirst {
        println "Found static modules & files to be hot-deployed (last one for each filename wins):"
    }

    eachFile { FileCopyDetails fcd ->
        def existsInDest = new File(destinationDir, fcd.name).exists()

        println "  * ${existsInDest ? 'skipping' : 'copying '} ${fcd.name.padRight(100)} (${rootProject.relativePath(fcd.file.parentFile)})"
    }
}

task copyOsgiModulesBuilt(type: Copy) {

    def service = "lfr"
    // // TODO this will also invoke patching on the build/dist bundle, which might be underirable (and slow)
    // // TODO is there a better way to get all the built artifacts?
    // dependsOn modulesProducingTask

    // the 'jar' task added by Liferay Workspace Plugin places the files
    // into osgi/modules, not deploy/

    // TODO by the time 'distBundle' finishes, also static files (from configs/)
    // will be found here; is that an issue?
    def builtModulesDestinationDir = "${gradle.liferayWorkspace.homeDir}/osgi/modules"

    from (builtModulesDestinationDir) {
        include '*.jar'
        include '*.war'
        include '*.lpkg'
    }

    // TODO make the dir configurable
    into "${rootProject.buildDir}/wedeploy/${service}/deploy"

    doFirst {
        println "Found built modules to be hot-deployed (${rootProject.relativePath(builtModulesDestinationDir)}):"
    }

    eachFile { FileCopyDetails fcd ->
        def existsInDest = new File(destinationDir, fcd.name).exists()

        println "  * ${existsInDest ? 'skipping' : 'copying '} ${fcd.name.padRight(100)} (${rootProject.relativePath(fcd.file.parentFile)})"
    }
}


project.tasks.distWeDeploy.dependsOn(collectOsgiConfigs)
project.tasks.distWeDeploy.dependsOn(collectPropertiesFiles)
project.tasks.distWeDeploy.dependsOn(collectWeDeployJSON)
project.tasks.distWeDeploy.dependsOn(collectDockerCompose)
project.tasks.distWeDeploy.dependsOn(copyStaticDeployableFiles)
project.tasks.distWeDeploy.dependsOn(copyOsgiModulesBuilt)
project.tasks.distWeDeploy.dependsOn(collectDockerCompose)
