/*
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 */

import org._10ne.gradle.rest.RestTask
import java.util.regex.Pattern

buildscript {
    repositories {
        mavenCentral()
        
        maven {
            // https://plugins.gradle.org/plugin/com.terrafolio.jenkins
            url "http://repo.jenkins-ci.org/releases/"
        }

        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        // To be able to process Mustache templates
        classpath group: 'com.github.spullara.mustache.java', name: 'compiler', version: '0.8.12'
    }
}

plugins {
    // TODO switch to https://github.com/crc83/gradle-jenkins-plugin? fork with more recent updates, like CSRF support
    // Jenkins plugin, based on https://plugins.gradle.org/plugin/com.terrafolio.jenkins
    id "com.terrafolio.jenkins" version "1.3.2"

    // REST plugin, based on https://plugins.gradle.org/plugin/org.tenne.rest
    // WARNING: JDK 8 is required: http://blog.10ne.org/2015/09/21/rest-gradle-plugin-update/comment-page-1/
    id "org.tenne.rest" version "0.4.2"

    // https://plugins.gradle.org/plugin/net.saliman.properties
    id "net.saliman.properties" version "1.4.6"
}


final Pattern SUPPORTED_JENKINS_VERSIONS = ~/^1\.6.+|2\..+$/

File jenkinsItemsDir = rootProject.file(gradle.liferayWorkspaceEe.jenkinsItemsDir)

File jenkinsJobsDir = new File(jenkinsItemsDir, 'jobs')
File jenkinsViewsDir = new File(jenkinsItemsDir, 'views')

def sourceSampleJenkinsJobsDir = file('sample-jobs')
def processedSampleJenkinsJobsDir = new File(project.buildDir, 'sample-jobs')

processSampleItems(sourceSampleJenkinsJobsDir, processedSampleJenkinsJobsDir)


// TODO remove all REST calls in favor of using 'jenkinsci' library? Does the waiting + restart by itself
//  https://github.com/jenkinsci/install-necessary-plugins/blob/master/src/main/java/org/jenkinsci/installNecessaryPlugins/Installer.java

// TODO figure out CSRF:
//  * https://github.com/ghale/gradle-jenkins-plugin/issues/78
//  * https://wiki.jenkins.io/display/JENKINS/Remote+access+API#RemoteaccessAPI-CSRFProtection

// Add Jenkins configuration based on https://github.com/ghale/gradle-jenkins-plugin/wiki

jenkins {
    servers {
        jenkinsServer {
            // the plugin will make sure the URL ends with '/'
            // see: https://github.com/ghale/gradle-jenkins-plugin/blob/master/src/main/groovy/com/terrafolio/gradle/plugins/jenkins/dsl/JenkinsServerDefinition.groovy#L19
            url gradle.liferayWorkspaceEe.jenkinsServerUrl
            secure gradle.liferayWorkspaceEe.jenkinsServerSecure

            username gradle.liferayWorkspaceEe.jenkinsUserName
            password gradle.liferayWorkspaceEe.jenkinsPassword
        }
    }

    defaultServer servers.jenkinsServer

    jobs {

        // add backed up Jenkins jobs, if any
        
        if (jenkinsJobsDir.exists()) {
            jenkinsJobsDir
                    .listFiles().findAll { it.name.endsWith('.xml') }
                    .collectEntries { jobXml -> [ jobXml.name.replaceAll(~/\.xml$/, ''), jobXml ] }
                    .each { String jobName, File jobXml ->

                "${jobName}" {
                    definition {
                        xml jobXml
                    }
                }
            }
        }

        // add managed jobs, if not added already

        gradle.liferayWorkspaceEe.jenkinsManagedJobNames
                .findAll { jobName -> !jenkins.jobs.hasProperty(jobName) }
                .each { jobName ->

            def sampleJobXml = new File(processedSampleJenkinsJobsDir, "${jobName}.xml")

            if (sampleJobXml.exists()) {

                // if we have a sample job of given name, load it from its XML

                "${jobName}" {
                    definition {
                        xml sampleJobXml
                    }
                }
            } else {
                // define "empty" job of given name locally, so that the Jenkins
                // tasks can fetch its XML (if the job exists in Jenkins server)

                "${jobName}" {
                    dsl {}
                }
            }
        }
    } // jobs {

    views {

        // add backed up views, if any

        if (jenkinsViewsDir.exists()) {
            jenkinsViewsDir
                    .listFiles().findAll { it.name.endsWith('.xml') }
                    .collectEntries { viewXml -> [ viewXml.name.replaceAll(~/.xml$/, ''), viewXml ] }
                    .each { String viewName, File viewXml ->

                "${viewName}" {
                    xml viewXml
                }
            }
        }

        // add manages views, if not present already from backed up views

        gradle.liferayWorkspaceEe.jenkinsManagedViewNames
                .findAll { viewName -> !jenkins.views.hasProperty(viewName) }
                .each { viewName ->

            if (viewName == 'Samples') {
                "${viewName}" {
                    dsl {
                        jobs {
                            names(
                                    // all sample jobs from the XML-based definition above
                                    (processedSampleJenkinsJobsDir
                                            .listFiles().findAll { it.name.endsWith('.xml') }
                                            .collect { it.name.replaceAll(~/.xml$/, '') }
                                    ) as String[]
                            )
                        }
                        columns {
                            status()
                            weather()
                            name()
                            lastSuccess()
                            lastFailure()
                            lastDuration()
                            buildButton()
                        }
                    }
                }
            }
            else {
                // define "empty" view of given name locally, so that the Jenkins
                // tasks can fetch its XML (if the job exists in Jenkins server)
                "${viewName}" {
                    dsl {}
                }
            }
        }
    } // views {
}

task initJenkinsServer() { task ->

    group "Liferay Workspace EE - Jenkins"
    description "Installs recommended plugins and creates sample jobs & views in Jenkins " +
            "server '${jenkins.servers.jenkinsServer.url}' for this workspace."

    dependsOn 'createSampleItems', 'installJenkinsPlugins'
}


[ deleteJenkinsItems, dumpRemoteJenkinsItems, retireJenkinsItems,
    updateJenkinsItems, validateJenkinsItems ].each { task ->

    // add nicer description - with the Jenkins server URL inside
    // Make sure all non-deprecated tasks added by the Jenkins plugin are listed under LWE group

    task.description = task.description.replace("the server(s)", "server '${jenkins.servers.jenkinsServer.url}'")

    task.dependsOn 'checkJenkinsVersionSupported'
    task.finalizedBy 'jenkinsRestCallFailureNote'
}

task createSampleItems() {
    dependsOn updateJenkinsItems

    // TODO do we want to cleanup the 'jenkins.jobs' to contain only samples?

}

task backupJenkinsItems(type: Copy) {
    group "Liferay Workspace EE - Jenkins"
    description "Backs up all managed Jenkins items into as XMLs inside ${jenkinsItemsDir}"

    dependsOn dumpRemoteJenkinsItems

    from "${buildDir}/remotes"      // this is where the XMLs will be stored by the 'dumpRemoteJenkinsItems'
    into jenkinsItemsDir

    // prevents empty directories like 'jenkinsServer/jobs' to remain
    // in the target directory, due to top-level dir stripping below
    includeEmptyDirs = false

    // strip the top-level 'jenkinsServer' directory, since we will have only one server defined
    eachFile { FileCopyDetails fileCopyDetails ->
        fileCopyDetails.path = fileCopyDetails.path.replaceAll('jenkinsServer', '')
    }

    doFirst {
        delete jenkinsJobsDir, jenkinsViewsDir
    }

    doLast {
        // pretty-print each XML, since it's dumped without any whitespaces
        fileTree(jenkinsItemsDir).include('**/*.xml').each { File f ->
            f.text = groovy.xml.XmlUtil.serialize(f.text)
        }

        println "Following items from '${jenkins.servers.jenkinsServer.url}' were " +
                "backed up as XMLs in '${jenkinsItemsDir}/' directory:"

        jenkinsJobsDir.list()?.each { jobXml ->
            println " * job '${jobXml.replace('.xml', '')}'"
        }

        jenkinsViewsDir.list()?.each { viewXml ->
            println " * view '${viewXml.replace('.xml', '')}'"
        }
    }
}

task restoreJenkinsItems() {
    group "Liferay Workspace EE - Jenkins"
    description "Restores all managed Jenkins items from XMLs backed up inside ${jenkinsItemsDir}"

    dependsOn updateJenkinsItems
}

dumpRemoteJenkinsItems {
    
    // This is described by the docs as recommended for safer import of the XMLs
    // back into Jenkins server
    prettyPrint = false
}

task listManagedJenkinsItems {
    group "Liferay Workspace EE - Jenkins"
    description "Lists all jobs and views which the Jenkins tasks will operate on. No other items" +
            "will be e.g. dumped, even if they existed in Jenkins server '${jenkins.servers.jenkinsServer.url}'."

    doLast {
        println "Jenkins items managed by this workspace project:"

        jenkins.jobs.each { job ->
            println "  * job '${job.name}'"
        }
        jenkins.views.each { view ->
            println "  * view '${view.name}'"
        }
    }
}

task deleteLocalJenkinsItemsBackup(type: Delete) {
    group "Liferay Workspace EE - Jenkins"
    description "Removes local XMLs of all Jenkins jobs and views, stored in '${jenkinsItemsDir}/' directory"

    delete jenkinsJobsDir, jenkinsViewsDir
}

task listJenkinsProperties() {
    group "Liferay Workspace EE - Jenkins"
    description "Lists all variables as used by Jenkins-related tasks."

    doLast {
        println "Jenkins variables being utilized:"

        gradle.liferayWorkspaceEe.findAll { it.key.startsWith('jenkins') }.each { key, value ->
            if (key == 'jenkinsPassword' && value) {
                // do not show password in output
                value = '***'
            }

            println "  ${key} = ${value}"
        }
    }
}

// Hide all deprecated tasks added by jenkins plugin from listing in 'gradlew tasks'
[ deleteJenkinsJobs, dumpJenkinsJobs, retireJenkinsJobs, updateJenkinsJobs, validateJenkinsJobs ].each { task ->
    task.group "Jenkins Management (Deprecated)"

    task.dependsOn 'checkJenkinsVersionSupported'
}

// Executed POST request is based on: http://stackoverflow.com/a/20848745/4966203:
//      curl -X POST -d '<jenkins><install plugin="git@2.0" /></jenkins>' \
//          --header 'Content-Type: text/xml' http://localhost:8080/pluginManager/installNecessaryPlugins

// TODO figure out CSRF:
//  * https://wiki.jenkins.io/display/JENKINS/Remote+access+API#RemoteaccessAPI-CSRFProtection
task installJenkinsPlugins(type: RestTask) {
    description "Installs recommended Jenkins plugins into target Jenkins server " +
            "'${jenkins.servers.jenkinsServer.url}'."

    dependsOn 'checkJenkinsVersionSupported'

    List jenkinsPlugins = gradle.liferayWorkspaceEe.jenkinsInstalledPluginIds

    onlyIf {
        !jenkinsPlugins.isEmpty()
    }

    // we want this to the the last REST call to Jenkins
    // deprecated tasks
    mustRunAfter deleteJenkinsJobs, dumpJenkinsJobs, retireJenkinsJobs, updateJenkinsJobs, validateJenkinsJobs
    // non-deprecated jenkins tasks
    mustRunAfter deleteJenkinsItems, dumpJenkinsItems, dumpRemoteJenkinsItems, retireJenkinsItems,
                        updateJenkinsItems, validateJenkinsItems

    // TODO would require active waiting for plugins' installation to complete
//    finalizedBy 'restartJenkinsSafely'


    httpMethod = 'post'
    uri = jenkins.servers.jenkinsServer.url + 'pluginManager/installNecessaryPlugins'

    if (jenkins.servers.jenkinsServer.secure) {
        username = jenkins.servers.jenkinsServer.username
        password = jenkins.servers.jenkinsServer.password

        requestHeaders = [
                // simulate preeemptive auth, since 403 is returned by Jenkins for this URL
                // when no auth header is set (not 401 to trigger second request with auth header added automatically)
                // based on: http://stackoverflow.com/a/6641988/4966203
                'Authorization': 'Basic ' + "${username}:${password}".bytes.encodeBase64().toString()
        ]
    }

    requestBody = """\
        <jenkins>
            ${jenkinsPlugins.collect { "<install plugin='${it}' />"}.join('\n') }
        </jenkins>""".stripIndent()

    requestContentType = groovyx.net.http.ContentType.XML
    contentType = groovyx.net.http.ContentType.HTML

    responseHandler = {
        logger.info "[LWE] Response from Jenkins server, after requesting to install plugins ('null' is expected): ${it}"
    }

    doFirst {
        logger.debug "[LWE] Sending POST to ${uri}, with body: ${requestBody}"
    }

    doLast {
        println "Following Jenkins plugins were installed into '${jenkins.servers.jenkinsServer.url}':"

        jenkinsPlugins.each {
            println "  * ${it}"
        }

        logger.warn """\
                |
                | ==> NOTE: Make sure to restart Jenkins server running on '${jenkins.servers.jenkinsServer.url}' after 
                |       all plugins have been installed. Only this makes sure they are properly loaded! 
                |       You can use e.g. '${jenkins.servers.jenkinsServer.url}safeRestart' in your browser.
                |""".stripMargin()
    }
}

// POST to /restart restarts right away, POST to /safeRestart waits for jobs to finish
//  https://stackoverflow.com/questions/8072700/how-to-restart-jenkins-manually

// TODO this always requires admin privileges, even if there is no security enabled or
// all users can do anything in Jenkins

//task restartJenkinsSafely(type: RestTask) {
//    description "Sends request to restart remote Jenkins server '${jenkins.servers.jenkinsServer.url}', " +
//            "after all currently running jobs have finished. There is no waiting for the restart to complete."
//
//    requiredProperty 'jenkinsUserName'
//    requiredProperty 'jenkinsPassword'
//
//    httpMethod = 'post'
//    uri = jenkins.servers.jenkinsServer.url + 'safeRestart'
//
//    if (jenkins.servers.jenkinsServer.secure) {
//        username = jenkins.servers.jenkinsServer.username
//        password = jenkins.servers.jenkinsServer.password
//
//        requestHeaders = [
//                // simulate preeemptive auth, since 403 is returned by Jenkins for this URL
//                // when no auth header is set (not 401 to trigger second request with auth header added automatically)
//                // based on: http://stackoverflow.com/a/6641988/4966203
//                'Authorization': 'Basic ' + "${username}:${password}".bytes.encodeBase64().toString()
//        ]
//    }
//
//
//    doLast {
//        println "Request to restart Jenkins server '${jenkins.servers.jenkinsServer.url}' was sent, it will be done when it's safe (after all currently running jobs finish). This is necessary for newly installed plugins to be loaded by Jenkins and available in the created jobs."
//    }
//}

// based on: https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API#RemoteaccessAPI-DetectingJenkinsversion
task checkJenkinsVersionSupported(type: RestTask) {
    description "Checks that the version of remote Jenkins server '${jenkins.servers.jenkinsServer.url}' " +
            "is supported by workspace scripts."

    httpMethod = 'get'
    uri = jenkins.servers.jenkinsServer.url + 'api'

    if (jenkins.servers.jenkinsServer.secure) {
        username = jenkins.servers.jenkinsServer.username
        password = jenkins.servers.jenkinsServer.password

        requestHeaders = [
                // simulate preeemptive auth, since 403 is returned by Jenkins for this URL
                // when no auth header is set (not 401 to trigger second request with auth header added automatically)
                // based on: http://stackoverflow.com/a/6641988/4966203
                'Authorization': 'Basic ' + "${username}:${password}".bytes.encodeBase64().toString()
        ]
    }

    responseHandler = {
        // version is stored by Jenkins in response header 'X-Jenkins'
        // header retrieval based on:
        //  * http://javadox.com/org.codehaus.groovy.modules.http-builder/http-builder/0.6/groovyx/net/http/HttpResponseDecorator.HeadersDecorator.html
        String jenkinsVersion = serverResponse.headers.'X-Jenkins'

        boolean jenkinsVersionSupported = jenkinsVersion?.matches(SUPPORTED_JENKINS_VERSIONS)

        println "Jenkins server on '${jenkins.servers.jenkinsServer.url}' has version '${jenkinsVersion}' - " +
                "this is ${jenkinsVersionSupported ? 'a supported' : 'an unsupported'} version for the use with " +
                "workspace EE scripts."

        if(!jenkinsVersionSupported) {
            throw new GradleException(
                    "Configured Jenkins server '${jenkins.servers.jenkinsServer.url}' reports " +
                            "version '${jenkinsVersion}', which does not match any of supported " +
                            "versions - ${SUPPORTED_JENKINS_VERSIONS} (regular expression). If you want " +
                            "to utilize tasks from the 'Liferay Workspace EE - Jenkins' group in the workspace, " +
                            "please use supported Jenkins server version.")
        }
    }
}

// TODO implement crumb retrieval to be used with manual REST calls
//// wget -q --output-document - \
////      'JENKINS_URL/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)'
//task retrieveCrumb(type: RestTask) {
//
//    httpMethod = 'get'
//    uri = jenkins.servers.jenkinsServer.url + 'crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)'
//
//    if (jenkins.servers.jenkinsServer.secure) {
//        username = jenkins.servers.jenkinsServer.username
//        password = jenkins.servers.jenkinsServer.password
//
//        requestHeaders = [
//                // simulate preeemptive auth, since 403 is returned by Jenkins for this URL
//                // when no auth header is set (not 401 to trigger second request with auth header added automatically)
//                // based on: http://stackoverflow.com/a/6641988/4966203
//                'Authorization': 'Basic ' + "${username}:${password}".bytes.encodeBase64().toString()
//        ]
//    }
//
//
//    contentType = groovyx.net.http.ContentType.TEXT
//
//    ext.crumbValue = 'crumb-not-retrieved-yet'
//
//    responseHandler = {
//        String crumb = serverResponse.body
//
//        // expose the crumb to other tasks
//        crumbValue = crumb
//    }
//}


def tasksPossiblyFailingDueToJenkinsRestCallError = [
        deleteJenkinsItems, dumpRemoteJenkinsItems, retireJenkinsItems,
        updateJenkinsItems, validateJenkinsItems,
        checkJenkinsVersionSupported, installJenkinsPlugins]

task jenkinsRestCallFailureNote {
    description "Helper tasks to suggest possible actions when a Jenkins REST call fails"
    group "Liferay Workspace EE - Jenkins"

    onlyIf {
        // collect all tasks which send a REST call which will require a valid CSRF crumb

        tasksPossiblyFailingDueToJenkinsRestCallError.count { it.state.failure } > 0
    }

    doLast {
        // Make sure to give a hint to user if REST call failed, possibly due to CSRF.
        // This task is finalizing all the tasks, so it will run even on the failure
        // of the task

        println """\
                |
                | NOTE: It looks like some Jenkins REST call to Jenkins server '${gradle.liferayWorkspaceEe.jenkinsServerUrl}'
                |       failed. Please check the following:https://ci.systemidentity.com/
                |           1. make sure your credentials are correct
                |               * Gradle project properties 'jenkinsUserName' and 'jenkinsPassword'
                |               * use either 'username + password' or 'username + API token' (preferred)
                |               * see gradle.workspace-ee-defaults.properties -> 'liferay.workspace.ee.jenkins.server.secure' for details
                |            
                |           2. make sure CSRF protection is disabled in Jenkins
                |               * errors like 'No valid crumb was included in the request (HTTP ERROR 403)'
                |               * CSRF can be configured in:
                |                   Manage Jenkins -> Configure Global Security -> Prevent Cross Site Request Forgery exploits
                | 
                |       Current version of scripts cannot get around CSRF protection, please disable 
                |       it temporarily if you want to setup your Jenkins using workspace ee. You can 
                |       enable CSRF again after initial Jenkins setup is done.
                |""".stripMargin()
        }
}

tasksPossiblyFailingDueToJenkinsRestCallError.each { task ->
    task.finalizedBy jenkinsRestCallFailureNote
}

def processSampleItems (File sourceSampleJenkinsJobsDir, File processedSampleJenkinsJobsDir) {
    assert sourceSampleJenkinsJobsDir
    assert sourceSampleJenkinsJobsDir.isDirectory()
    assert processedSampleJenkinsJobsDir

    processedSampleJenkinsJobsDir.mkdirs()

    sourceSampleJenkinsJobsDir
            .listFiles()
            .findAll { it.name.endsWith('.xml') }
            .each { File sourceSampleJobXml ->

        def processedSampleJobXml = new File(
                processedSampleJenkinsJobsDir, sourceSampleJobXml.name.replace('.mustache.xml', '.xml'))

        executeMustacheTemplate(
                sourceSampleJobXml, processedSampleJobXml,
                [
                        LiferayWorkspaceProjectName: rootProject.name,
                        NotificationEmail          : "${rootProject.name}@liferay.com"
                ])
    }
}

/**
 * Processes a Mustache template loaded from {@code source} file, with the variables
 * defined in {@code binding}, writing the result into {@code target} file.
 * 
 * @param source
 * @param target
 * @param binding
 */
void executeMustacheTemplate(File source, File target, Map<String, Object> binding) {
    assert source
    assert target
    assert binding != null

    // based on: https://gist.github.com/parj/5680695

    Writer targetWriter = new FileWriter(target)
    Reader sourceReader = new FileReader(source)

    def mf = new com.github.mustachejava.DefaultMustacheFactory();
    def mustache = mf.compile(sourceReader, "template");
    
    mustache.execute(targetWriter, binding);
    targetWriter.flush();
}