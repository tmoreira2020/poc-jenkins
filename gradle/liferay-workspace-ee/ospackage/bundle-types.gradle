/*
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 */

/**
 * The list of supported bundle types for Liferay Portal which can be used
 * to build OS packages.
 */
@groovy.transform.TupleConstructor(includes = ['appServerValidationFile'])
enum SupportedBundleType {

    tomcat('bin/catalina.sh'),

    unknown('bin/unknown.sh')

    final String appServerValidationFile

    /**
     * Resolve the given String to be one of the types, or 'unknown' if no match found.
     * @param bundleType
     * @return
     */
    static SupportedBundleType from(String bundleType) {
        return (values().find { it.name() == bundleType }) ?: unknown
    }

}

String configuredBundleType = gradle.liferayWorkspaceEe.bundleType
String configuredAppServerDirName = gradle.liferayWorkspaceEe.bundleAppServerDirectoryName

// TODO this can be done earlier, on the extracted bundle... (distBundle, initBundle tasks)
task checkBundleType {

    description "Makes sure that the built Liferay bundle TAR contains configured type of the app server ('${configuredBundleType}')"

    dependsOn project.distBundleTarTask

    /**
     * Returns the configured bundle type of this build, allowing access to expected
     * information about the bundle.
     */
    ext.bundleType = SupportedBundleType.from(configuredBundleType)

    doLast {

        def configuredBundleTypeParsed = bundleType
        assert configuredBundleTypeParsed != SupportedBundleType.unknown,
                "'${configuredBundleType}' is none of known bundle types: ${SupportedBundleType.values()}"

        // 'configuredBundleType' is checked against the list of supported bundle types
        // in 'liferay-workspace-ee.gradle', before any task is started (to fail fast)

        boolean appServerDirFound =
                isConfiguredAppServerDirectoryContainedInBundle(project.liferayBundleBuiltTarFile, configuredBundleTypeParsed)

        if (!appServerDirFound) {
            throw new InvalidUserDataException("Configured bundle type '${configuredBundleType}' " +
                    "and directory '${configuredAppServerDirName}' is not matching the contents " +
                    "of built Liferay bundle file '${rootProject.relativePath(liferayBundleBuiltTarFile)}'. " +
                    "Are you sure your 'liferay.workspace.bundle.url' points to " +
                    "a Liferay bundle with the '${configuredBundleType}' app server inside " +
                    "the '${configuredAppServerDirName}' directory as configured?")
        }
    }
}

/**
 * Checks whether given Liferay bundle TAR (contained files structure) matches
 * given bundle type and throws AssertionError if not.
 *
 * @param bundleTarFile the TAR file to test
 * @param expectedBundleType the bundle type to match on the TAR file
 * @return the result of the detection - the name of the uniquely matched app server
 *          directory; this will typically be a value like 'tomcat-8.0.32'
 * @throws AssertionError if unique app server dir was not detected
 */
private boolean isConfiguredAppServerDirectoryContainedInBundle(File bundleTarFile, SupportedBundleType expectedBundleType) {
    assert bundleTarFile
    assert bundleTarFile.exists(),
            "Built Liferay bundle TAR does not exist yet (${bundleTarFile}), make sure '${distBundleTarTask.name}' " +
            "is executed before this method is called"
    assert expectedBundleType


    File destDirectory = file("${buildDir}/bundle-type-check")

    destDirectory.deleteDir() // make sure it's empty before untar

    // Ant-style match pattern, which can be used to extract validated
    // file from e.g. a TAR archive containing Liferay bundle.
    // <p>
    // Archives produced by distBundleZip / distBundleTar have no top-level directory
    // (like the stock bundles have), so the match pattern does not need any **\/**.
    //
    def matchPattern = "${gradle.liferayWorkspaceEe.bundleAppServerDirectoryName}/${expectedBundleType.appServerValidationFile}"

    logger.info "[LWE] Testing '${matchPattern}' for '${expectedBundleType}' bundle type in '${bundleTarFile}', " +
            "extracting '${matchPattern}'"

    def compression = _detectTarCompression(bundleTarFile.name)

    ant.untar(src: bundleTarFile, dest: destDirectory, compression: compression, overwrite: true) {
        patternset {
            include name: matchPattern
        }
    }

    def appServerDirsMatched = destDirectory.list() ?: []

    logger.info "[LWE] matching dirs found using '${matchPattern}' in '${bundleTarFile}': ${appServerDirsMatched}."

    return destDirectory.exists() && appServerDirsMatched.size() == 1
}

/**
 * Returns the name of the compression used by TAR file, by guessing it from its
 * file name extension.
 *
 * @param tarFileName
 * @return 'none', 'bzip' or 'gzip'
 *
 * @throws IllegalArgumentException if guess cannot be made (unknown file extension used)
 */
private String _detectTarCompression(String tarFileName) {
    assert tarFileName

    def compression

    switch (tarFileName) {
        case ~/.*\.tar\.gz$/:
            compression = "gzip"
            break
        case ~/.*\.tar\.bz$/:
            compression = "bzip"
            break
        case ~/.*\.tar$/:
            compression = "none"
            break
        default:
            throw new IllegalArgumentException(
                    "Cannot determine compression used by TAR file '${tarFileName}'" +
                    "based on its extension. Make sure it's one of: .tar.gz, .tar.bz, .tar")
    }

    return compression
}